{"version":3,"sources":["webpack:///./src/data/constants/actionTypes/posts.js","webpack:///./src/data/constants/actionTypes/comment.js","webpack:///./src/data/history.js","webpack:///./src/data/apiClient.js","webpack:///./src/index.jsx","webpack:///./src/containers/PostsPage/index.jsx","webpack:///./src/components/ToggleablePosts/index.jsx","webpack:///./src/data/actions/posts.js","webpack:///./src/containers/CommentSearchPage/index.jsx","webpack:///./src/components/CommentSearch/index.jsx","webpack:///./src/components/CommentDetails/index.jsx","webpack:///./src/data/actions/comment.js","webpack:///./src/containers/DisclosurePage/index.jsx","webpack:///./src/data/store.js","webpack:///./src/data/reducers/index.js","webpack:///./src/data/reducers/posts.js","webpack:///./src/data/reducers/comment.js"],"names":["STARTED_FETCHING_POSTS","GET_POSTS","FINISHED_FETCHING_POSTS","STARTED_FETCHING_COMMENT","FINISHED_FETCHING_COMMENT","ERROR_FETCHING_COMMENT","GET_COMMENT","history","__webpack_require__","createBrowserHistory","apiClient","getAuthenticatedAPIClient","appBaseUrl","process","env","BASE_URL","authBaseUrl","LMS_BASE_URL","loginUrl","LOGIN_URL","logoutUrl","LOGOUT_URL","csrfTokenApiPath","CSRF_TOKEN_API_PATH","refreshAccessTokenEndpoint","REFRESH_ACCESS_TOKEN_ENDPOINT","accessTokenCookieName","ACCESS_TOKEN_COOKIE_NAME","userInfoCookieName","USER_INFO_COOKIE_NAME","_reactRouterDom","_reactRedux","_connectedReactRouter","_frontendAuth","_apiClient2","default","ensurePublicOrAuthencationAndCookies","window","location","pathname","_reactDom2","render","_react2","createElement","Provider","store","_store2","ConnectedRouter","_history2","className","Link","to","Switch","Route","path","component","_DisclosurePage2","PrivateRoute","_PostsPage2","authenticatedAPIClient","redirect","_CommentSearchPage2","document","getElementById","_ToggleablePosts","_posts","PostsPage","connect","state","posts","dispatch","getPosts","fetchPosts","_ToggleablePosts2","_paragon","PostItem","_ref","title","body","PostsList","_ref2","slice","map","post","key","id","ToggleablePosts","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","handleCheck","bind","checked","Component","setState","CheckBox","name","label","onChange","defaultProps","propTypes","_propTypes2","string","arrayOf","object","func","_axios","startedFetchingPosts","type","finishedFetchingPosts","_axios2","get","then","result","data","_CommentSearch","_comment","CommentSearchPage","commentDetails","comment","details","errorFetching","getComment","commentId","fetchComment","_CommentSearch2","_react","CommentSearch","handleSubmit","handleInputChange","StatusAlert","open","dialog","onClose","InputText","value","description","Button","onClick","_CommentDetails2","postId","email","shape","number","bool","CommentDetails","startedFetchingComment","finishedFetchingComment","errorFetchingComment","catch","_redux","_reduxLogger","_logOnlyInProduction","initialState","getAuthenticationState","loggerMiddleware","createLogger","createStore","_reducers2","composeWithDevTools","applyMiddleware","routerMiddleware","_reduxThunk2","identityReducer","newState","combineReducers","router","connectRouter","authentication","arguments","length","undefined","startedFetching","finishedFetching","action","_extends"],"mappings":"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","file":"app.113dc8ee40dd848af690.js","sourcesContent":["const STARTED_FETCHING_POSTS = 'STARTED_FETCHING_POSTS';\nconst GET_POSTS = 'GET_POSTS';\nconst FINISHED_FETCHING_POSTS = 'FINISHED_FETCHING_POSTS';\n\nexport {\n  STARTED_FETCHING_POSTS,\n  GET_POSTS,\n  FINISHED_FETCHING_POSTS,\n};\n","const STARTED_FETCHING_COMMENT = 'STARTED_FETCHING_COMMENT';\nconst FINISHED_FETCHING_COMMENT = 'FINISHED_FETCHING_COMMENT';\nconst ERROR_FETCHING_COMMENT = 'ERROR_FETCHING_COMMENT';\nconst GET_COMMENT = 'GET_COMMENT';\n\nexport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n};\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import { getAuthenticatedAPIClient } from '@edx/frontend-auth';\n\nconst apiClient = getAuthenticatedAPIClient({\n  appBaseUrl: process.env.BASE_URL,\n  authBaseUrl: process.env.LMS_BASE_URL,\n  loginUrl: process.env.LOGIN_URL,\n  logoutUrl: process.env.LOGOUT_URL,\n  csrfTokenApiPath: process.env.CSRF_TOKEN_API_PATH,\n  refreshAccessTokenEndpoint: process.env.REFRESH_ACCESS_TOKEN_ENDPOINT,\n  accessTokenCookieName: process.env.ACCESS_TOKEN_COOKIE_NAME,\n  userInfoCookieName: process.env.USER_INFO_COOKIE_NAME,\n});\n\nexport default apiClient;\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { PrivateRoute } from '@edx/frontend-auth';\n\nimport PostsPage from './containers/PostsPage';\nimport CommentSearchPage from './containers/CommentSearchPage';\nimport DisclosurePage from './containers/DisclosurePage';\nimport history from './data/history';\nimport store from './data/store';\n\nimport './App.scss';\n\nimport apiClient from './data/apiClient';\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <div>\n        <header>\n          <nav>\n            <ul className=\"nav\">\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\">Home</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/posts\">Posts</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/comment-search\">Comment Search</Link></li>\n              <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/public/disclosure\">Disclosure</Link></li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          <Switch>\n            <Route path=\"/public/disclosure\" component={DisclosurePage} />\n            <Route path=\"/public/hello\" component={() => <span>Hello World, open route</span>} />\n            <PrivateRoute\n              path=\"/posts\"\n              component={PostsPage}\n              authenticatedAPIClient={apiClient}\n              redirect={`${process.env.BASE_URL}`}\n            />\n            <PrivateRoute\n              path=\"/comment-search\"\n              component={CommentSearchPage}\n              authenticatedAPIClient={apiClient}\n              redirect={`${process.env.BASE_URL}`}\n            />\n            <PrivateRoute\n              path=\"/\"\n              component={() => <span>Hello World, Private route</span>}\n              authenticatedAPIClient={apiClient}\n              redirect={`${process.env.BASE_URL}`}\n            />\n          </Switch>\n        </main>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n\nif (apiClient.ensurePublicOrAuthencationAndCookies(window.location.pathname)) {\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n","import { connect } from 'react-redux';\n\nimport ToggleablePosts from '../../components/ToggleablePosts';\nimport { fetchPosts } from '../../data/actions/posts';\n\nconst mapStateToProps = state => (\n  {\n    posts: state.posts.posts,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getPosts: () => dispatch(fetchPosts()),\n  }\n);\n\nconst PostsPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ToggleablePosts);\n\nexport default PostsPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CheckBox } from '@edx/paragon';\n\nconst PostItem = ({ title, body }) => (\n  <div className=\"post\">\n    <h3>{title}</h3>\n    <span>{body}</span>\n  </div>\n);\n\nconst PostsList = ({ posts }) => (\n  <ul>\n    {\n      posts\n        .slice(0, 10)\n        .map(post => (\n          <li key={post.id}>\n            <PostItem title={post.title} body={post.body} />\n          </li>\n        ))\n    }\n  </ul>\n);\n\nclass ToggleablePosts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = this.handleCheck.bind(this);\n\n    this.state = {\n      checked: false,\n    };\n  }\n\n  handleCheck() {\n    this.setState({ checked: !this.state.checked });\n    this.props.getPosts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Posts</h1>\n        <div>\n          <CheckBox\n            name=\"activate-posts\"\n            label=\"See Posts\"\n            checked={this.state.checked}\n            onChange={this.handleCheck}\n          />\n        </div>\n        <div>\n          {\n            this.state.checked\n            && <PostsList posts={this.props.posts} />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nPostItem.defaultProps = {\n  title: '',\n  body: '',\n};\n\nPostItem.propTypes = {\n  title: PropTypes.string,\n  body: PropTypes.string,\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n};\n\nToggleablePosts.defaultProps = {\n  posts: [],\n  getPosts: () => {},\n};\n\nToggleablePosts.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object),\n  getPosts: PropTypes.func,\n};\n\nexport default ToggleablePosts;\n","import axios from 'axios';\n\nimport {\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n  GET_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst startedFetchingPosts = () => (\n  {\n    type: STARTED_FETCHING_POSTS,\n  }\n);\n\nconst finishedFetchingPosts = () => (\n  {\n    type: FINISHED_FETCHING_POSTS,\n  }\n);\n\nconst getPosts = posts => (\n  {\n    type: GET_POSTS,\n    posts,\n  }\n);\n\nconst fetchPosts = () => (\n  (dispatch) => {\n    dispatch(startedFetchingPosts());\n    return axios.get('https://jsonplaceholder.typicode.com/posts')\n      // TODO: handle response error\n      .then((result) => {\n        dispatch(getPosts(result.data));\n        dispatch(finishedFetchingPosts());\n      });\n  }\n);\n\nexport {\n  startedFetchingPosts,\n  finishedFetchingPosts,\n  getPosts,\n  fetchPosts,\n};\n","import { connect } from 'react-redux';\n\nimport CommentSearch from '../../components/CommentSearch';\nimport { fetchComment } from '../../data/actions/comment';\n\nconst mapStateToProps = state => (\n  {\n    commentDetails: state.comment.details,\n    errorFetching: state.comment.errorFetching,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    getComment: commentId => dispatch(fetchComment(commentId)),\n  }\n);\n\nconst CommentSearchPage = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CommentSearch);\n\nexport default CommentSearchPage;\n","import React, { Component } from 'react';\nimport { InputText, Button, StatusAlert } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nimport CommentDetails from '../CommentDetails';\n\nclass CommentSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = { commentId: '' };\n  }\n\n  handleSubmit() {\n    this.props.getComment(this.state.commentId);\n  }\n\n  handleInputChange(commentId) {\n    this.setState({ commentId });\n  }\n\n  render() {\n    return (\n      <div>\n        <StatusAlert\n          open={this.props.errorFetching}\n          dialog=\"Invalid Comment ID\"\n          onClose={() => {}}\n        />\n        <InputText\n          name=\"comment-id-input\"\n          label=\"Input a Comment ID\"\n          value=\"\"\n          description=\"Comment ID to search by\"\n          onChange={this.handleInputChange}\n        />\n        <Button label=\"Search for Comment By ID\" onClick={this.handleSubmit} />\n        {\n          this.props.commentDetails\n          && !this.props.errorFetching\n          && <CommentDetails {...this.props.commentDetails} />\n        }\n      </div>\n    );\n  }\n}\n\nCommentSearch.defaultProps = {\n  commentDetails: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  getComment: () => {},\n  errorFetching: false,\n};\n\nCommentSearch.propTypes = {\n  commentDetails: PropTypes.shape({\n    id: PropTypes.number,\n    postId: PropTypes.number,\n    name: PropTypes.string,\n    email: emailPropType,\n    body: PropTypes.string,\n  }),\n  getComment: PropTypes.func,\n  errorFetching: PropTypes.bool,\n};\n\nexport default CommentSearch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport emailPropType from 'email-prop-type';\n\nconst CommentDetails = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => (\n  <ul>\n    <li>ID: {id}</li>\n    <li>Post ID: {postId}</li>\n    <li>Name: {name}</li>\n    <li>Email Address: {email}</li>\n    <li>Body: {body}</li>\n  </ul>\n);\n\nCommentDetails.defaultProps = {\n  id: null,\n  postId: null,\n  name: '',\n  email: 'example@example.com',\n  body: '',\n};\n\nCommentDetails.propTypes = {\n  id: PropTypes.number,\n  postId: PropTypes.number,\n  name: PropTypes.string,\n  email: emailPropType,\n  body: PropTypes.string,\n};\n\nexport default CommentDetails;\n","import axios from 'axios';\n\nimport {\n  STARTED_FETCHING_COMMENT,\n  FINISHED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst startedFetchingComment = () => ({ type: STARTED_FETCHING_COMMENT });\nconst finishedFetchingComment = () => ({ type: FINISHED_FETCHING_COMMENT });\nconst errorFetchingComment = () => ({ type: ERROR_FETCHING_COMMENT });\nconst getComment = comment => ({ type: GET_COMMENT, comment });\nconst fetchComment = commentId => (\n  (dispatch) => {\n    dispatch(startedFetchingComment());\n    return axios.get(`https://jsonplaceholder.typicode.com/comments/${commentId}`)\n      .then((result) => {\n        dispatch(getComment(result.data));\n        dispatch(finishedFetchingComment());\n      })\n      .catch(() => dispatch(errorFetchingComment()));\n  }\n);\n\nexport {\n  startedFetchingComment,\n  finishedFetchingComment,\n  errorFetchingComment,\n  getComment,\n  fetchComment,\n};\n","import React from 'react';\n\nconst DisclosurePage = () => (\n  <div>\n    <h1 className=\"alert alert-primary\">Some Disclosure Page</h1>\n    <p>Blahblahblahblahblahblah</p>\n    <ul>\n      <li>Agree to this</li>\n      <li>Agree to this</li>\n      <li>Also agree to this</li>\n    </ul>\n  </div>\n);\n\nexport default DisclosurePage;\n","import { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport history from './history';\nimport createRootReducer from './reducers';\nimport apiClient from './apiClient';\n\nconst initialState = apiClient.getAuthenticationState();\nconst loggerMiddleware = createLogger();\n\nconst store = createStore(\n  createRootReducer(history),\n  initialState,\n  composeWithDevTools(applyMiddleware(\n    routerMiddleware(history), // for dispatching history actions\n    thunkMiddleware,\n    loggerMiddleware,\n  )),\n);\n\nexport default store;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport posts from './posts';\nimport comment from './comment';\n\nconst identityReducer = (state) => {\n  const newState = { ...state };\n  return newState;\n};\n\nexport default history => combineReducers({\n  router: connectRouter(history),\n  // The authentication state is added as initialState when\n  // creating the store in data/store.js.\n  authentication: identityReducer,\n  posts,\n  comment,\n});\n","import {\n  GET_POSTS,\n  STARTED_FETCHING_POSTS,\n  FINISHED_FETCHING_POSTS,\n} from '../constants/actionTypes/posts';\n\nconst posts = (state = { posts: [], startedFetching: false, finishedFetching: false }, action) => {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n    case STARTED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case FINISHED_FETCHING_POSTS:\n      return {\n        ...state,\n        startedFetching: false,\n        finishedFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default posts;\n","import {\n  STARTED_FETCHING_COMMENT,\n  ERROR_FETCHING_COMMENT,\n  GET_COMMENT,\n} from '../constants/actionTypes/comment';\n\nconst initialState = {\n  details: {\n    id: null,\n    postId: null,\n    name: '',\n    email: 'example@example.com',\n    body: '',\n  },\n  startedFetching: false,\n  finishedFetching: false,\n  errorFetching: false,\n};\n\nconst comment = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_COMMENT:\n      return {\n        ...state,\n        details: { ...action.comment },\n        finishedFetching: true,\n        errorFetching: false,\n      };\n    case STARTED_FETCHING_COMMENT:\n      return {\n        ...state,\n        startedFetching: true,\n        finishedFetching: false,\n      };\n    case ERROR_FETCHING_COMMENT:\n      return {\n        ...state,\n        finishedFetching: true,\n        errorFetching: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default comment;\n"],"sourceRoot":""}